<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <para>
  Le module <filename>intarray</filename> fournit un certain nombre de
  fonctions et d'opérateurs utiles pour manipuler des tableaux d'entiers sans
  valeurs NULL. Il y a aussi un support pour les recherches par index en
  utilisant certains des opérateurs.
 </para>

 <para>
  Toutes ces opérations rejeteront une erreur si un tableau fourni contient
  des éléments NULL.
 </para>

 <para>
  La plupart des opérations sont seulement intéressants pour des tableaux à
  une dimension. Bien qu'elles accepteront des tableaux à plusieurs dimensions,
  les données sont traitées comme s'il y avait un tableau linéaire.
 </para>

 <sect2>
  <title>Fonctions et opérateurs d'<filename>intarray</filename></title>

  <para>
   Les fonctions fournies par le module <filename>intarray</filename>
   sont affichées dans <xref linkend="intarray-func-table"/> alors que
   les opérateurs sont indiqués dans <xref linkend="intarray-op-table"/>.
  </para>

  <table id="intarray-func-table">
   <title>Fonctions <filename>intarray</filename></title>

   <tgroup cols="5">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Type en retour</entry>
      <entry>Description</entry>
      <entry>Exemple</entry>
      <entry>Résultat</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>icount(int[])</function><indexterm><primary>icount</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>nombre d'éléments dans un tableau</entry>
      <entry><literal>icount('{1,2,3}'::int[])</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[], text dir)</function><indexterm><primary>sort</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>tri du tableau &mdash; <parameter>dir</parameter> doit valoir <literal>asc</literal> ou <literal>desc</literal></entry>
      <entry><literal>sort('{1,2,3}'::int[], 'desc')</literal></entry>
      <entry><literal>{3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[])</function></entry>
      <entry><type>int[]</type></entry>
      <entry>tri en ordre ascendant</entry>
      <entry><literal>sort(array[11,77,44])</literal></entry>
      <entry><literal>{11,44,77}</literal></entry>
     </row>

     <row>
      <entry><function>sort_asc(int[])</function><indexterm><primary>sort_asc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>tri en ordre descendant</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>sort_desc(int[])</function><indexterm><primary>sort_desc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>tri en ordre descendant</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>uniq(int[])</function><indexterm><primary>uniq</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>supprime les duplicats adjacents</entry>
      <entry><literal>uniq(sort('{1,2,3,2,1}'::int[]))</literal></entry>
      <entry><literal>{1,2,3}</literal></entry>
     </row>

     <row>
      <entry><function>idx(int[], int item)</function><indexterm><primary>idx</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>index du premier élément correspondant à
       <parameter>item</parameter> (0 si aucune correspondance)</entry>
      <entry><literal>idx(array[11,22,33,22,11], 22)</literal></entry>
      <entry><literal>2</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start, int len)</function><indexterm><primary>subarray</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>portion du tableau commençant à la position <parameter>start</parameter>, de longueur <parameter>len</parameter></entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2, 3)</literal></entry>
      <entry><literal>{2,3,2}</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start)</function></entry>
      <entry><type>int[]</type></entry>
      <entry>portion du tableau commençant à la position <parameter>start</parameter></entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2)</literal></entry>
      <entry><literal>{2,3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>intset(int)</function><indexterm><primary>intset</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>crée un tableau à un élément</entry>
      <entry><literal>intset(42)</literal></entry>
      <entry><literal>{42}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
   <title>Opérateurs d'<filename>intarray</filename></title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>Opérateur</entry>
      <entry>Renvoie</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>int[] &amp;&amp; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>surcharge &mdash; <literal>true</literal> si les tableaux ont
       au moins un élément en commun</entry>
     </row>
     <row>
      <entry><literal>int[] @&gt; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>contient &mdash; <literal>true</literal> si le tableau gauche
       contient le tableau droit</entry>
     </row>
     <row>
      <entry><literal>int[] &lt;@ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>est contenu &mdash; <literal>true</literal> si le tableau gauche
       est contenu dans le tableau droit</entry>
     </row>
     <row>
      <entry><literal># int[]</literal></entry>
      <entry><type>int</type></entry>
      <entry>nombre d'éléments dans le tableau</entry>
     </row>
     <row>
      <entry><literal>int[] # int</literal></entry>
      <entry><type>int</type></entry>
      <entry>index (identique à la fonction <function>idx</function>)</entry>
     </row>
     <row>
      <entry><literal>int[] + int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>pousse l'élément dans le tableau (l'ajoute à la fin du
       tableau)</entry>
     </row>
     <row>
      <entry><literal>int[] + int[]  </literal></entry>
      <entry><type>int[]</type></entry>
      <entry>concaténation de tableau (le tableau à droite est ajouté à la
       fin du tableau à gauche)</entry>
     </row>
     <row>
      <entry><literal>int[] - int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>supprime les entrée correspondant à l'argument droit du
       tableau</entry>
     </row>
     <row>
      <entry><literal>int[] - int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>supprime les éléments du tableau droit à partir de la
       gauche</entry>
     </row>
     <row>
      <entry><literal>int[] | int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>union des arguments</entry>
     </row>
     <row>
      <entry><literal>int[] | int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>union des tableaux</entry>
     </row>
     <row>
      <entry><literal>int[] &amp; int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>intersection des tableaux</entry>
     </row>
     <row>
      <entry><literal>int[] @@ query_int</literal></entry>
      <entry><type>boolean</type></entry>
      <entry><literal>true</literal> si le tableau satisfait la requête (voir
       ci-dessous)</entry>
     </row>
     <row>
      <entry><literal>query_int ~~ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry><literal>true</literal> si le tableau satisfait la requête
       (commutateur de <literal>@@</literal>)</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   (Avant PostgreSQL 8.2, les opérateurs de contenance <literal>@&gt;</literal>
   et <literal>&lt;@</literal> étaient respectivement appelés
   <literal>@</literal> et <literal>~</literal>. Ces noms sont toujours
   disponibles mais sont considérés comme obsolètes et seront un jour supprimés.
   Notez que les anciens noms sont inversés par rapport à la convention
   suivie par les types de données géométriques&nbsp;!)
  </para>

  <para>
   Les opérateurs <literal>&amp;&amp;</literal>, <literal>@&gt;</literal> et
   <literal>&lt;@</literal> sont équivalents aux opérateurs internes
   <productname>PostgreSQL</productname> de même nom, sauf qu'ils travaillent
   sur des tableaux d'entiers, sans valeurs NULL, alors que les opérateurs
   internes travaillent sur des tableaux de tout type. Cette restriction les
   rend plus rapides que les opérateurs internes dans de nombreux cas.
  </para>

  <para>
   Les opérateurs <literal>@@</literal> et <literal>~~</literal> testent si
   un tableau satisfait une <firstterm>requête</firstterm>, qui est exprimée
   comme une valeur d'un type de données spécialisé <type>query_int</type>. Une
   <firstterm>requête</firstterm> consiste en des valeurs de type integer qui
   sont vérifiées avec les éléments du tableau, parfois combinées en utilisant
   les opérateurs <literal>&amp;</literal> (AND), <literal>|</literal> (OR)
   et <literal>!</literal> (NOT). Les parenthèses peuvent être utilisées si
   nécessaire. Par exemple, la requête <literal>1&amp;(2|3)</literal> établit
   une correspondance avec les tableaux qui contiennent 1 et aussi soit 2 soit
   3.
  </para>
 </sect2>

 <sect2>
  <title>Support des index</title>

  <para>
   <filename>intarray</filename> fournit un support d'index pour les opérateurs
   <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>, <literal>&lt;@</literal>
   et <literal>@@</literal>, ainsi que pour l'égalité de tableaux.
  </para>

  <para>
   Deux classes d'opérateur pour index GiST sont fournies&nbsp;:
   <literal>gist__int_ops</literal> (utilisé par défaut) convient pour des
   tableaux d'ensembles de données de petites et moyennes tailles alors que
   <literal>gist__intbig_ops</literal> utilise une signature plus importante
   et est donc plus intéressant pour indexer des gros ensembles de données.
   (c'est-à-dire les colonnes contenant un grand nombre de valeurs de tableaux
   distinctes). L'implantation utilise une structure de données RD-tree avec
   une compression interne à perte.
  </para>

  <para>
   Il y a aussi une classe d'opérateur GIN,<literal>gin__int_ops</literal>
   supporting the same operators, qui n'est pas disponible par défaut.
  </para>

  <para>
   Le choix d'un indexage GiST ou IN dépend des caractéristiques relatives
   de performance qui sont discutées ailleurs.
  </para>
 </sect2>

 <sect2>
  <title>Exemple</title>

  <programlisting>
-- un message peut être dans un ou plusieurs <quote>sections</quote>
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-- crée un index spécialisé
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops);

-- sélectionne les messages dans la section 1 ou 2 - opérateur OVERLAP
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-- sélectionne les messages dans sections 1 et 2 - opérateur CONTAINS
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-- idem, en utilisant l'opérateur QUERY
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
  </programlisting>
 </sect2>

 <sect2>
  <title>Tests de performance</title>

  <para>
   Le répertoire des sources (<filename>contrib/intarray/bench</filename>)
   contient une suite de tests de performance, qui peut être exécutée sur un
   serveur <productname>PostgreSQL</productname> déjà installé. (Cela
   nécessite aussi l'installation de <filename>DBD::Pg</filename>.). Pour
   l'exécuter&nbsp;:
  </para>

  <programlisting>
   cd .../contrib/intarray/bench
   createdb TEST
   psql -c "CREATE EXTENSION intarray" TEST
   ./create_test.pl | psql TEST
   ./bench.pl
  </programlisting>

  <para>
   Le script <filename>bench.pl</filename> contient un grand nombre d'options.
   Elles sont affichées quand il est exécuté sans arguments.
  </para>
 </sect2>


 <sect2>
  <title>Auteurs</title>
  <para>
   Ce travail a été réalisé par Teodor Sigaev (<email>teodor@sigaev.ru</email>)
   et Oleg Bartunov (<email>oleg@sai.msu.su</email>). Voir le
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist">site de
    GiST</ulink> pour des informations supplémentaires. Andrey Oktyabrski a fait
   un gros travail en ajoutant des nouvelles fonctions et opérateurs.
  </para>
 </sect2>

</sect1>

