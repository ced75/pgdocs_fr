<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<refentry id="pgbench">
 <indexterm zone="pgbench">
  <primary>pgbench</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pgbench</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pgbench</refname>
  <refpurpose>lance un test de performance de <productname>PostgreSQL</productname></refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg choice="plain"><option>-i</option></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <para>
   <application>pgbench</application> est un programme simple qui exécute un
   test de performances (<foreignphrase>benchmark</foreignphrase> en
   anglais) sur <productname>PostgreSQL</productname>. Il exécute la même
   séquence de commandes SQL de nombreuses fois, si possible dans plusieurs
   sessions en parallèle, puis calcule le taux de transaction moyen
   (transactions par seconde). Par défaut, <application>pgbench</application>
   teste un scénario vaguement basé sur TPC-B, impliquant cinq
   <command>SELECT</command>, <command>UPDATE</command> et
   <command>INSERT</command> par transaction. Néanmoins il est facile de tester
   d'autres cas en écrivant ses propres fichiers de transaction.
  </para>

  <para>
   Voici un exemple d'affichage de pgbench&nbsp;:

   <screen>
transaction type: TPC-B (sort of)
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 85.184871 (including connections establishing)
tps = 85.296346 (excluding connections establishing)
   </screen>

   Les six premières lignes indiquent simplement certains des paramètres
   les plus importants. La ligne suivant rapporte le nombre de transactions
   terminées et souhaitées (le dernier étant juste le produit du nombre
   de clients avec le nombre de transactions par client)&nbsp;; ils doivent être égaux
   sauf si un échec est arrivé avant la fin (avec l'option <option>-T</option>,
   seul le nombre réel de transactions est affiché.) Les deux dernières lignes
   précisent le taux de transactions, avec et sans le temps de lancement
   de la session.
  </para>

  <para>
   Le test de transaction par défaut, ressemblant à TPC-B, nécessite des tables
   particulières qu'il faut créer. <application>pgbench</application> doit
   être appelé avec l'option <option>-i</option> (initialisation) pour les
   créer et les peupler. (Cette étape n'est pas nécessaire dans le cas de script
   personnalisé, mais la base doit être configurée en conséquence.)
   L'initialisation ressemble à&nbsp;:

   <programlisting>
pgbench -i <optional> <replaceable>autres-options</replaceable> </optional> <replaceable>nom_base</replaceable>
   </programlisting>

   où <replaceable>nom_base</replaceable> est le nom d'une base de données déjà
   créée et à utiliser pour les tests. (Les
   options <option>-h</option>, <option>-p</option>, et/ou
   <option>-U</option> peuvent être utilisées pour indiquer la façon
   de se connecter au serveur de bases de données.)
  </para>

  <caution>
   <para>
    <literal>pgbench -i</literal> crée quatre tables&nbsp;:
    <structname>pgbench_accounts</structname>, <structname>pgbench_branches</structname>,
    <structname>pgbench_history</structname> et <structname>pgbench_tellers</structname>,
    détruisant toute table existante de ce nom. Il convient d'y être attentif
    s'il existe des tables de même nom&nbsp;!
   </para>
  </caution>

  <para>
   Avec un <quote>facteur d'échelle</quote> de 1, les tables contiennent
   initialement ce nombre de lignes&nbsp;:
  </para>
  <screen>
table                   # de lignes
-----------------------------------
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
  </screen>
  <para>
   Le nombre de lignes peut être augmenté en utilisant l'option
   <option>-s</option> (facteur d'échelle). L'option
   <option>-F</option> (facteur de remplissage) peut aussi être utilisée
   à ce moment.
  </para>

  <para>
   Une fois la configuration exécutée, le
   test de performance peut être lancé avec une commande qui n'inclut pas l'option
   <option>-i</option>, c'est-à-dire&nbsp;:

   <programlisting>
pgbench <optional> <replaceable>options</replaceable> </optional> <replaceable>nom_base</replaceable>
   </programlisting>

   Dans la plupart des cas, vous aurez besoin de quelques options pour que
   ce test soit réellement intéressant. Les options les plus importantes
   sont <option>-c</option> (nombre de clients), <option>-t</option>
   (nombre de transactions), <option>-T</option> (limite de temps) et
   <option>-f</option> (pour spécifier un script personnalisé). Voir
   ci-dessous pour une liste complète.
  </para>

 </refsect1>

 <refsect1>
  <title>Options</title>

  <para>
   La documentation ci-après est répartie en trois sous-sections&nbsp;: des
   options différentes sont utilisées pour l'initialisation de la base de
   données, pour l'exécution des tests de performances, voire dans les deux
   cas.
  </para>

  <refsect2 id="pgbench-init-options">
   <title>Options d'initialisation</title>

   <para>
    <application>pgbench</application> comprend les options de la ligne de
    commande suivants&nbsp;:

    <variablelist>

     <varlistentry>
      <term><option>-i</option></term>
      <term><option>--initialize</option></term>
      <listitem>
       <para>
        Requis lorsqu'on veut utiliser le mode d'initialisation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F</option> <replaceable>facteur de remplissage</replaceable></term>
      <term><option>--fillfactor=</option><replaceable>facteur de remplissage</replaceable></term>
      <listitem>
       <para>
        Crée les tables <structname>pgbench_accounts</structname>,
        <structname>pgbench_tellers</structname> et
        <structname>pgbench_branches</structname> avec le facteur de remplissage
        donné. La valeur par défaut est de 100.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
       <para>
        N'exécute aucun VACUUM après l'initialisation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-q</option></term>
      <term><option>--quiet</option></term>
      <listitem>
       <para>
        Bascule les traces en mode silencieux, ne faisant qu'un message de
        progression toutes les cinq secondes. Les traces par défaut impriment
        un message toutes les 100000 lignes, ce qui affiche souvent de nombreuses
        lignes par seconde, tout spécialement sur du bon matériel.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <listitem>
       <para>
        Indique la latence moyenne par requête (temps d'exécution de la
        perspective du client) de chaque commande après la fin du test de
        performances. Voir ci-dessous pour les détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>facteur d'echelle</replaceable></term>
      <term><option>--scale=</option><replaceable>facteur d'echelle</replaceable></term>
      <listitem>
       <para>
        Multiplie le nombre de rangées par le facteur d'echelle.
        Par exemple, <literal>-s 100</literal> créera 10,000,000 rangées
        dans la table <structname>pgbench_accounts</structname>. La valeur par
        défaut est de 1.
        Quand le facteur d'échelle est de 20000 ou plus, les colonnes utilisées
        pour les identifiants de compte (colonnes <structfield>aid</structfield>)
        basculeront vers le type <type>bigint</type>), pour qu'elles puissent
        contenir les identifiants en question.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--foreign-keys</option></term>
      <listitem>
       <para>
        Crée les clés étrangères entre les tables standards.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--index-tablespace=<replaceable>index_tablespace</replaceable></option></term>
      <listitem>
       <para>
        Crée les index dans le tablespace spécifié, plutôt que dans le
        tablespace par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--tablespace=<replaceable>tablespace</replaceable></option></term>
      <listitem>
       <para>
        Crée les tables dans le tablespace spécifié, plutôt que dans le
        tablespace par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--unlogged-tables</option></term>
      <listitem>
       <para>
        Crée toutes les tables comme des tables non journalisées, plutôt que
        comme des tables ordinaires.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

  </refsect2>

  <refsect2 id="pgbench-run-options">
   <title>Options de benchmark</title>

   <para>
    <application>pgbench</application> comprend les options suivantes en ligne
    de commande&nbsp;:

    <variablelist>

     <varlistentry>
      <term><option>-c</option> <replaceable>clients</replaceable></term>
      <term><option>--client=</option><replaceable>clients</replaceable></term>
      <listitem>
       <para>
        Nombre de clients simulés et donc le nombre de sessions concurrentes.
        La valeur par défaut est de 1.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>--connect</option></term>
      <listitem>
       <para>
        Établit une nouvelle connexion pour chaque transaction, plutôt que
        le faire une fois par session.
        Ceci est utile pour mésurer les ressources consommées par la connexion.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <term><option>--debug</option></term>
      <listitem>
       <para>
        Afficher la sortie de déboguage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D</option> <replaceable>nom_variable</replaceable><literal>=</literal><replaceable>valeur</replaceable></term>
      <term><option>--define=</option><replaceable>nom_variable</replaceable><literal>=</literal><replaceable>valeur</replaceable></term>
      <listitem>
       <para>
        Définit une variable pouvant être utilisé par un script personnalisé
        (voir plus bas). Plusieurs options <option>-D</option> peuvent être
        utilisées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f</option> <replaceable>fichier</replaceable></term>
      <term><option>--file=</option><replaceable>fichier</replaceable></term>
      <listitem>
       <para>
        Lire le script de transaction à partir de <replaceable>fichier</replaceable>.
        Voir plus bas pour les détails.
        <option>-N</option>, <option>-S</option> et <option>-f</option>
        ne peuvent pas être utilisés en même temps.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j</option> <replaceable>threads</replaceable></term>
      <term><option>--jobs=</option><replaceable>threads</replaceable></term>
      <listitem>
       <para>
        Nombre de threads au sein de <application>pgbench</application>.
        L'utilisation de plus d'un thread peut être utile sur des machines multi-processeurs.
        Le nombre de client doit être un multiple du nombre de threads
        puisqu'on donne à chaque thread le même nombre de sessions clients à gérer.
        La valeur par défaut est de 1.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-l</option></term>
      <term><option>--log</option></term>
      <listitem>
       <para>
        Écrire le temps pris par chaque transaction dans le fichier de log.
        Voir plus bas pour les détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-M</option> <replaceable>mode de requête</replaceable></term>
      <term><option>--protocol=</option><replaceable>mode de requête</replaceable></term>
      <listitem>
       <para>
        Protocole à utiliser pour soumettre les requêtes au serveur&nbsp;:
        <itemizedlist>
         <listitem>
          <para><literal>simple</literal>&nbsp;: utiliser le protocole de requêtes simples.</para>
         </listitem>
         <listitem>
          <para><literal>extended</literal>&nbsp;: utiliser le protocole de requêtes étendues.</para>
         </listitem>
         <listitem>
          <para><literal>prepared</literal>: utiliser le protocole de requêtes étendues avec instructions préparées.</para>
         </listitem>
        </itemizedlist>
        Le protocole par defaut est celui de requêtes simples. (Voir <xref linkend="protocol"/>
        pour plus d'information.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
       <para>
        Ne pas exécuter de VACUUM avant de lancer le test.
        Cette option est <emphasis>obligatoire</emphasis>
        si vous lancez un scénario de test personalisé qui n'inclut pas
        les tables standards <structname>pgbench_accounts</structname>,
        <structname>pgbench_branches</structname>, <structname>pgbench_history</structname> et
        <structname>pgbench_tellers</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--skip-some-updates</option></term>
      <listitem>
       <para>
        Ne pas mettre à jour <structname>pgbench_tellers</structname> et
        <structname>pgbench_branches</structname>.
        Ceci évitera les problemes de mises à jour sur ces tables mais
        rendra les tests moins semblables à TPC-B.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option> <replaceable>sec</replaceable></term>
      <term><option>--progress=</option><replaceable>sec</replaceable></term>
      <listitem>
       <para>
        Afficher la progression chaque <literal>sec</literal> secondes. Le
        rapport inclut le tmps depuis le début de l'exécution, le nombre de
        transactions par seconde depuis le dernier rapport, la latence moyenne
        des transactions, et la déviation standard depuis le dernier rapport.
        En utilisant l'option (<option>-R</option>), la latence est calculée en
        prenant en compte l'heure de début prévue de la transaction, et non pas
        l'heure de début réelle.. De ce faire, cela inclut aussi le temps de
        latence moyen.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--report-latencies</option></term>
      <listitem>
       <para>
        Renvoie la latence moyenne par requête (durée d'exécution de la
        perspective du client) de chaque commande à la fin du benchmark. Voir
        ci-dessous pour les détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option> <replaceable>taux</replaceable></term>
      <term><option>--rate=</option><replaceable>taux</replaceable></term>
      <listitem>
       <para>
        Exécuter les transactions en ciblant le taux indiqué plutôt que de les
        exécuter le plus rapidement possible (comportement par défaut). Le taux
        est donné en transactions par seconde. Si le taux cible est au-dessus
        du taux maximal, la limite de taux n'impactera pas les résultats.
       </para>
       <para>
        Le taux est ciblé en commençant les transactions en utilisant une ligne
        de temps basée sur la distribution de Poisson. Le temps de démarrage
        attendu se déplace suivant le premier client démarré, et non pas suivant
        la fin de la transaction précédente. Cette approche signifie que, quand
        les transactions dépassent leur durée finale prévue, les suivants
        peuvent récupérer de nouveau.
       </para>
       <para>
        Lorsque la limitation est activée, la latence des transactions rapportée
        en fin de test est calculée à partir de l'heure de début prévue, de
        sorte qu'il comprend le temps d'attente de la fin de la transaction
        précédente. La durée d'attente est appelée durée de latence planifiée,
        et ses valeur moyenne et valeur maximale sont aussi rapportées
        séparément. La latence de la transaction, calculée  partir de l'heure
        de début réelle de la transactions, donc le temps passé à exécuter la
        transaction au niveau de la base de données, peut se calculer en
        soustrayant la durée de la latence planifiée de la latence rapportée.
       </para>
       <para>
        Une grande durée de latence planifiée est une indication que le
        système ne peut pas traiter les transactions à ce rythme, avec le
        nombre choisi de clients et de threads. Quand la durée d'exécution
        moyenne des transactions est plus longue que l'intervalle planifié
        entre chaque transactions, toutes les transactions suivantes vont
        durer encore plus longtemps, et la durée de latence planifiée ne fera
        que grossir jusqu'à la fin de l'exécution du test. Quand ceci survient,
        vous devez réduire le taux de transaction indiqué.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>facteur d'échelle</replaceable></term>
      <term><option>--scale=</option><replaceable>facteur d'échelle</replaceable></term>
      <listitem>
       <para>
        Rapporter le facteur d'echelle spécifié dans la sortie de
        <application>pgbench</application>. Avec les tests intégrés
        par défaut, ceci n'est pas necessaie&nbsp;; le facteur
        sera déduit en comptant les nombres de rangées dans la table
        <structname>pgbench_branches</structname>. Par contre, lors que vous
        testerez des benchmarks personalisés (avec l'option <option>-f</option>),
        le facteur rapporté sera de 1 sauf si cette option est utilisée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S</option></term>
      <term><option>--select-only</option></term>
      <listitem>
       <para>
        Faire des tests à base de select uniquement plutôt que TPC-B.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>transactions</replaceable></term>
      <term><option>--transactions=</option><replaceable>transactions</replaceable></term>
      <listitem>
       <para>
        Le nombre de transactions que chaque client doit jouer. Le défaut est de 10.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T</option> <replaceable>secondes</replaceable></term>
      <term><option>--time=</option><replaceable>secondes</replaceable></term>
      <listitem>
       <para>
        Lancer ce test autant de secondes, plutôt qu'un nombre fixe de transactions
        par clients. <option>-t</option> et <option>-T</option> ne peuvent
        pas être utilisés en même temps.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--vacuum-all</option></term>
      <listitem>
       <para>
        Faire un vacuum sur les quatre tables standard avant de lancer le test.
        Sans <option>-n</option> ou <option>-v</option>, pgbench fera un vacuum sur
        les tables <structname>pgbench_tellers</structname> et
        <structname>pgbench_branches</structname> et tronquera
        <structname>pgbench_history</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--aggregate-interval</option> <replaceable>seconds</replaceable></term>
      <listitem>
       <para>
        Longueur de l'intervalle d'agrégation (en secondes). Peut seulement
        être utilisée avec <application>-l</application> - avec cette option,
        la trace contient un résumé par intervalle (nombre de transactions,
        latence minimale et maximale, et deux champs supplémentaires utiles
        pour l'estimation de la variance).
       </para>
       <para>
        Cette option n'est actuellement pas supportée sous Windows.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--sampling-rate</option> <replaceable>taux</replaceable></term>
      <listitem>
       <para>
        Taux d'échantillonnage, utilisé lors de l'écriture des données dans les
        traces, pour réduire la quantité de traces générées. Si cette option est
        fournie, seule la fraction de transactions indiquées est tracée. 1,0
        signifie que toutes les transactions seront tracées, 0,05 signifie que
        seulement 5% des transactions seront tracées.
       </para>
       <para>
        Rappelez-vous de prendre en compte le taux d'échantillonnage lors du
        traitement du fichier de traces. Par exemple, lors du calcul du nombre
        de transactions par seconde, vous aurez besoin de multiplier les
        nombres en concordance (par exemple avec un taux d'échantillonnage de
        0,01, vous obtiendrez réellement un centième du nombre de transactions
        par seconde).
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

  </refsect2>

  <refsect2 id="pgbench-common-options">
   <title>Options générales</title>

   <para>
    <application>pgbench</application> reconnait les options habituelles suivantes
    de ligne de commande&nbsp;:

    <variablelist>

     <varlistentry>
      <term><option>-h</option> <replaceable>nom de machine</replaceable></term>
      <term><option>--host=</option><replaceable>nom de machine</replaceable></term>
      <listitem>
       <para>
        Le nom de machine du serveur base de données
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</replaceable></term>
      <term><option>--port=</option><replaceable>port</replaceable></term>
      <listitem>
       <para>
        Le numéro de port du serveur base de données
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>nom d'utilisateur</replaceable></term>
      <term><option>--username=</option><replaceable>nom d'utilisateur</replaceable></term>
      <listitem>
       <para>
        Le nom avec lequel se connecter
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
       <para>
        Affiche la version de <application>pgbench</application>, puis quitte.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
       <para>
        Affiche l'aide sur les arguments en ligne de commande
        <application>pgbench</application>, puis quitte.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

  </refsect2>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <refsect2>
   <title>Quelle <quote>transaction</quote> est réalisée dans
    pgbench&nbsp;?</title>

   <para>
    Le script de transaction par défaut exécute sept commandes&nbsp;:
   </para>

   <orderedlist>
    <listitem><para><literal>BEGIN;</literal></para></listitem>
    <listitem><para><literal>UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</literal></para></listitem>
    <listitem><para><literal>SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</literal></para></listitem>
    <listitem><para><literal>UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</literal></para></listitem>
    <listitem><para><literal>UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</literal></para></listitem>
    <listitem><para><literal>INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</literal></para></listitem>
    <listitem><para><literal>END;</literal></para></listitem>
   </orderedlist>

   <para>
    Si vous indiquez <option>-N</option>, les étapes 4 et 5 ne sont pas inclus
    dans la transaction. Si vous indiquez <option>-S</option>, seul le
    <command>SELECT</command> est exécuté.
   </para>
  </refsect2>

  <refsect2>
   <title>Scripts personnalisés</title>

   <para>
    <application>pgbench</application> sait exécuter des scénarios personnalisés
    en remplaçant le script de transaction par défaut (décrit ci-dessus) avec
    un script de transaction lu à partir d'un fichier (option
    <option>-f</option>). Dans ce cas, une <quote>transaction</quote> compte
    en tant qu'une exécution du fichier. Vous pouvez même indiquer plusieurs
    scripts (avec plusieurs options <option>-f</option>), auquel cas un
    script est choisi au hasard à chaque fois qu'une session client exécute
    une nouvelle transaction.
   </para>

   <para>
    Le fichier doit contenir une commande par ligne&nbsp;; les commandes SQL
    multi-lignes ne sont pas acceptées. Les lignes vides et les lignes
    commençant par <option>--</option> sont ignorées. Les lignes du fichier
    peuvent aussi contenir des <quote>meta commandes</quote>, qui sont
    interprétées par <application>pgbench</application> lui-même, comme
    décrit ci-dessous.
   </para>

   <para>
    Il existe une fonctionnalité de substitution de variables pour les fichiers.
    Les variables sont configurables par l'option <option>-D</option> en
    ligne de commande, comme expliqué ci-dessus, ou par les méta-commandes
    expliquées ci-dessous. En plus des variables pré-initialisées par les
    options <option>-D</option>, il existe quelques variables préconfigurées
    automatiquement, listées dans <xref linkend="pgbench-automatic-variables"/>.
    Une valeur indiquée pour ces variables en utilisant l'option
    <option>-D</option> prénd précédence sur les préconfigurations automatiques.
    Une fois configurée,
    la valeur d'une variable peut être insérée dans une commande SQL en
    écrivant <literal>:</literal><replaceable>nom_variable</replaceable>.
    Lors de l'exécution de plusieurs sessions clients, chaque session a son
    propre ensemble de variables.
   </para>

   <table id="pgbench-automatic-variables">
    <title>Variables automatiques</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Variable</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>scale</literal> </entry>
       <entry>facteur d'échelle actuel</entry>
      </row>

      <row>
       <entry> <literal>client_id</literal> </entry>
       <entry>numéro unique identifiant la session du client (commence à partir
        de zéro)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    Les méta-commandes du script commencent par un antislash
    (<literal>\</literal>). Les arguments d'une méta-commande sont séparés par
    des espaces blancs. Voici la liste des méta-commandes acceptées&nbsp;:
   </para>

   <variablelist>
    <varlistentry>
     <term>
      <literal>\set <replaceable>nom_variable</replaceable> <replaceable>operande1</replaceable> [ <replaceable>operateur</replaceable> <replaceable>operande2</replaceable> ]</literal>
     </term>

     <listitem>
      <para>
       Initialise la variable <replaceable>varname</replaceable> avec une
       valeur entière calculée.
       Chaque <replaceable>operande</replaceable> est soit une constante
       entière soit une référence
       <literal>:</literal><replaceable>nom_variable</replaceable> à une variable
       entière. L'<replaceable>operateur</replaceable> peut être
       <literal>+</literal>, <literal>-</literal>, <literal>*</literal> ou <literal>/</literal>.
      </para>

      <para>
       Exemple&nbsp;:
       <programlisting>
\set ntellers 10 * :scale
       </programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <literal>\setrandom <replaceable>nom_variable</replaceable> <replaceable>min</replaceable> <replaceable>max</replaceable></literal>
     </term>

     <listitem>
      <para>
       Initialise la variable <replaceable>nom_variable</replaceable> à une
       valeur entière prise au hasard entre les limites
       <replaceable>min</replaceable> et <replaceable>max</replaceable>,
       limites inclues.
       Chaque limite peut être soit une constante entière soit une référence
       <literal>:</literal><replaceable>nom_variable</replaceable> à une valeur
       entière.
      </para>

      <para>
       Exemple&nbsp;:
       <programlisting>
\setrandom aid 1 :naccounts
       </programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <literal>\sleep <replaceable>nombre</replaceable> [ us | ms | s ]</literal>
     </term>

     <listitem>
      <para>
       Provoque un endormissement de l'exécution du script pour la durée
       indiquée en microsecondes (<literal>us</literal>), millisecondes
       (<literal>ms</literal>) ou secondes (<literal>s</literal>). Si l'unité
       est omise, alors ce seront par défaut des secondes.
       <replaceable>nombre</replaceable> peut être soit un entier soit une
       référence <literal>:</literal><replaceable>nom_variable</replaceable> à
       un entier.
      </para>

      <para>
       Exemple&nbsp;:
       <programlisting>
\sleep 10 ms
       </programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <literal>\setshell <replaceable>nom_variable</replaceable> <replaceable>commande</replaceable> [ <replaceable>argument</replaceable> ... ]</literal>
     </term>

     <listitem>
      <para>
       Configure la variable <replaceable>nom_variable</replaceable> avec le
       résultat de la commande shell <replaceable>commande</replaceable>. La
       commande doit renvoyer une valeur entière via sa sortie standard.
      </para>

      <para>
       <replaceable>argument</replaceable> peut être soit une constante de type
       texte soit une référence
       <literal>:</literal><replaceable>nom_variable</replaceable> à une
       variable de n'importe quel type. Si vous voulez utiliser
       <replaceable>argument</replaceable> en commençant avec un signe
       deux-points, vous devez ajouer un signe deux-points supplémentaires au
       début de <replaceable>argument</replaceable>.
      </para>

      <para>
       Exemple&nbsp;:
       <programlisting>
\setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
       </programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <literal>\shell <replaceable>commande</replaceable> [ <replaceable>argument</replaceable> ... ]</literal>
     </term>

     <listitem>
      <para>
       Idem à <literal>\setshell</literal>, mais le résultat est ignoré.
      </para>

      <para>
       Exemple&nbsp;:
       <programlisting>
\shell command literal_argument :variable ::literal_starting_with_colon
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    En exemple, voici la définition complète d'une transaction style
    TPC-B&nbsp;:

    <programlisting>
\set nbranches :scale
\set ntellers 10 * :scale
\set naccounts 100000 * :scale
\setrandom aid 1 :naccounts
\setrandom bid 1 :nbranches
\setrandom tid 1 :ntellers
\setrandom delta -5000 5000
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
    </programlisting>

    Ce script permet à chaque itération de la transaction de référencer des
    lignes différentes, prises au hasard. (Cet exemple montre aussi pourquoi
    il est imporant que chaque session client ait ses propres variables &mdash;
    sinon elles ne traiteraient pas des lignes différentes.)
   </para>

  </refsect2>

  <refsect2>
   <title>Journalisation par transaction</title>

   <para>
    Avec l'option <option>-l</option> mais sans l'option
    <option>--aggregate-interval</option>, <application>pgbench</application>
    écrit la durée prise par chaque transaction dans un fichier de traces.
    Le journal sera nommé
    <filename>pgbench_log.<replaceable>nnn</replaceable></filename>, où
    <replaceable>nnn</replaceable> est le PID du processus pgbench.
    Si l'option <option>-j</option> vaut 2 ou plus, ce qui va créer plusieurs
    threads de travail, chacun d'entre eux aura son propre journal applicatif.
    Le premier utilise le même nom de fichier que s'il avait été seul. Les
    autres fichiers des autres travailleurs seront nommés
    <filename>pgbench_log.<replaceable>nnn</replaceable>.<replaceable>mmm</replaceable></filename>,
    où <replaceable>mmm</replaceable> est un numéro séquentiel pour chaque
    travailleur et commençant à 1.
   </para>

   <para>
    Le format de ce journal est&nbsp;:

    <synopsis>
    <replaceable>client_id</replaceable> <replaceable>transaction_no</replaceable> <replaceable>time</replaceable> <replaceable>file_no</replaceable> <replaceable>time_epoch</replaceable> <replaceable>time_us</replaceable> [<replaceable>schedule_lag</replaceable>]
    </synopsis>

    où <replaceable>time</replaceable> est la durée totale de la transaction en
    microsecondes, <replaceable>file_no</replaceable> identifie le script qui
    a été utilisé (utile quand plusieurs scripts sont indiqués avec
    <option>-f</option>) et
    <replaceable>time_epoch</replaceable>/<replaceable>time_us</replaceable> sont
    une date/heure au format epoch Unix et un décalage en microsecondes
    (convenable pour la création d'un horodatage ISO 8601 avec des secondes
    en fraction) indiquant la date et heure de la fin de la transaction.
    Le dernier champ, <replaceable>schedule_lag</replaceable>, est la
    différence entre l'heure de début planifiée de la transaction, et l'heure à
    laquelle elle a réellement commencé, en microsecondes. Cette information
    n'est présente que si l'option <option>--rate</option> est utilisée.
   </para>

   <para>
    Voici un exemple de journal&nbsp;:
    <screen>
 0 199 2241 0 1175850568 995598
 0 200 2465 0 1175850568 998079
 0 201 2513 0 1175850569 608
 0 202 2038 0 1175850569 2663
    </screen>
   </para>

   <para>
    Lors de l'exécution d'un test long sur du matériel qui peut gérer un grand
    nombre de transactions, les traces peuvent devenir très grosses. L'option
    <option>--sampling-rate</option> peut être utilisée pour ne tracer qu'un
    ensemble aléatoire de transactions.
   </para>
  </refsect2>

  <refsect2>
   <title>Traces agrégées</title>

   <para>
    Avec l'option <option>--aggregate-interval</option>, les traces utilisent un
    format un peu différent&nbsp;:

    <synopsis>
<replaceable>début_intervalle</replaceable> <replaceable>nombre_de_transactions</replaceable> <replaceable>somme_latence</replaceable> <replaceable>somme_latence_2</replaceable> <replaceable>min_latence</replaceable> <replaceable>max_latence</replaceable> [<replaceable>lag_sum</replaceable> <replaceable>lag_2_sum</replaceable> <replaceable>min_lag</replaceable> <replaceable>max_lag</replaceable>]
    </synopsis>

    où <replaceable>début_intervalle</replaceable> est le début de l'intervalle
    (horodatage au format UNIX epoch), <replaceable>nombre_de_transactions</replaceable>
    est le nombre de transactions dans cet intervalle,
    <replaceable>somme_latence</replaceable> est la somme des latences (pour que
    vous puissiez calculer la moyenne facilement). Les deux champs suivants sont
    utiles pour estimer la variances - <replaceable>somme_latence</replaceable>
    est une somme des latences et <replaceable>somme_latence_2</replaceable> est
    une somme des latence puissance 2. Les deux derniers champs sont
    <replaceable>min_latence</replaceable> - la latence minimale dans cet intervalle,
    et <replaceable>max_latence</replaceable> - la latence maximale dans cet
    intervalle. Une transaction est comptée dans l'intervalle où elle a été validée.
    Les quatre derniers champs, <replaceable>lag_sum</replaceable>,
    <replaceable>lag_2_sum</replaceable>, <replaceable>min_lag</replaceable>
    et <replaceable>max_lag</replaceable>, sont seulement présents si l'option
    est utilisée. Ils sont calculés à partir du moment où chaque transaction
    doit attendre la fin de la précédente, autrement dit la différence entre
    l'heure de début planifiée de chaque transaction et l'heure de début
    réelle.
   </para>

   <para>
    Voici un exemple de sortie&nbsp;:
    <screen>
1345828501 5601 1542744 483552416 61 2573
1345828503 7884 1979812 565806736 60 1479
1345828505 7208 1979422 567277552 59 1391
1345828507 7685 1980268 569784714 60 1398
1345828509 7073 1979779 573489941 236 1411
    </screen></para>

   <para>
    Notez que, bien que la trace simple (non agrégée) contient une référence des
    fichiers de script personnalisés, la trace agrégée n'en contient pas. Du
    coup, si vous avez besoin de données par script, vous devez agréger les
    données vous-même.
   </para>

  </refsect2>

  <refsect2>
   <title>Latence par requête</title>

   <para>
    Avec l'option <option>-r</option>, <application>pgbench</application>
    récupère le temps passé sur chaque requête exécutée par les clients. Il
    affiche ensuite la moyenne de ces valeurs, comme la latence de chaque
    requête, une fois que le test de performances est terminé.
   </para>

   <para>
    Pour le script par défaut, la sortie ressemble à ceci&nbsp;:
    <screen>
starting vacuum...end.
transaction type: TPC-B (sort of)
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 618.764555 (including connections establishing)
tps = 622.977698 (excluding connections establishing)
statement latencies in milliseconds:
        0.004386        \set nbranches 1 * :scale
        0.001343        \set ntellers 10 * :scale
        0.001212        \set naccounts 100000 * :scale
        0.001310        \setrandom aid 1 :naccounts
        0.001073        \setrandom bid 1 :nbranches
        0.001005        \setrandom tid 1 :ntellers
        0.001078        \setrandom delta -5000 5000
        0.326152        BEGIN;
        0.603376        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
        0.454643        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
        5.528491        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
        7.335435        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
        0.371851        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
        1.212976        END;
    </screen>
   </para>

   <para>
    Si plusieurs fichiers de script sont donnés, les moyennes sont reportées
    séparément pour chaque fichier de script.
   </para>

   <para>
    Notez que la récupération de cette information pour chaque requête exécutée
    ajoute une surcharge. Cela ralentira la vitesse d'exécution moyenne et
    diminuera d'autant le nombre de transactions par seconde calculé. Le
    ralentissement constaté varie significativement suivant la plateforme et le
    matériel. Comparer les valeurs moyennes avec et sans latence est une bonne
    façon de constater si la surcharge est significative ou non.
   </para>
  </refsect2>

  <refsect2>
   <title>Bonnes pratiques</title>

   <para>
    Il est très facile d'utiliser <application>pgbench</application> pour
    produire des nombres sans signification. Voici quelques lignes de conduite
    pour vous aider à obtenir des résultats intéressants.
   </para>

   <para>
    En premier lieu, ne <emphasis>jamais</emphasis> croire tout test qui ne
    s'exécute que pendant quelques secondes. Utilisez l'option
    <option>-t</option> ou <option>-T</option>
    pour que le test dure plusieurs minutes pour rendre
    le bruit insignifiant. Dans certains cas, nous avez besoin de quelques
    heures pour obtenir des chiffres reproductibles. Exécuter le test plusieurs
    fois est une bonne idée pour savoir si vos résultats sont reproductibles.
   </para>

   <para>
    Pour le scénario par défaut, style TPC-B, le facteur d'échelle à
    l'initialisation (<option>-s</option>) doit être au moins aussi important
    que le plus grand nombre de clients que vous souhaitez supporter
    (<option>-c</option>)&nbsp;; sinon vous ne ferez que mesurer la contention
    des mises à jour. Il n'y a que <option>-s</option> lignes dans la table
    <structname>pgbench_branches</structname>, et chaque transaction veut en mettre une
    à jour, donc les valeurs <option>-c</option> supérieures à
    <option>-s</option> résulteront sans doute en beaucoup de transactions
    bloquées, en attente d'autres transactions.
   </para>

   <para>
    Le scénario test par défaut est aussi assez sensible du moment où les
    tables ont été initialisées&nbsp;: une accumulation de lignes morts et
    d'espace vide dans les tables modifient les résultats. Pour comprendre
    les résultats, vous devez garder trace de nombre total de mises à jour
    et des moments où un VACUUM est exécuté. Si l'autovacuum est activé,
    cela peut causer des modifications non prévisibles dans les performances
    mesurées.
   </para>

   <para>
    Une limite de <application>pgbench</application> est qu'il peut devenir
    lui-même le goulot d'étranglement lors de tentative de tests d'un grand
    nombre de sessions clients. Ceci peut se voir allégé en exécutant
    <application>pgbench</application> sur une autre machine que le serveur
    de bases de données, bien que la latence du réseau est essentielle. Il
    pourrait même être utile d'exécuter plusieurs instances
    <application>pgbench</application> en parallèle sur plusieurs machines
    client, pour le même serveur de bases de données.
   </para>
  </refsect2>

  <refsect2>
   <title>Securité</title>

   <para>
    Si des utilisateurs non dignes de confiance ont accès à une base de
    données qui a adopté une <link linkend="ddl-schemas-patterns">méthode
    sécurisée d'utilisation des schémas</link>, il ne faut pas exécuter
    <application>pgbench</application> dans cette base.
    <application>pgbench</application> utilise des noms non qualifiés et ne
    peut pas manipuler le chemin de recherche.
   </para>
  </refsect2>
 </refsect1>
</refentry>
